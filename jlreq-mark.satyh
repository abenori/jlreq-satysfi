module JLReqMark : sig
  val set : int -> inline-text -> inline-boxes
  val get : int -> int -> inline-text option
  val get-current : int -> inline-text option
end = struct
  % (index,page,中身)
  let-mutable ref-mark <- []
  
  let set index txt =
    let hook pbinfo _ =
      let-rec aux lst =
        match lst with
        | (i,p,m) :: xs -> 
          let (b,rest) = aux xs in
          if i == index && p == pbinfo#page-number then
            (true,(i,p,txt) :: rest)
          else
            (b,(i,p,m) :: rest)
        | [] -> (false,[])
      in
      let (b,nlst) = aux !ref-mark in
      let newmarks = 
        if b then nlst
        else (index,pbinfo#page-number,txt) :: nlst
      in
      ref-mark <- newmarks
    in
    hook-page-break hook
  let get index page =
    let-rec aux lst =
      match lst with
      | (i,p,m)  :: xs ->
        if i == index && p == page then Some(m)
        else aux xs
      | [] -> None
    in
    aux !ref-mark

  let get-current index =
    let-rec aux lst =
      match lst with
      | (i,p,m) :: xs ->
        let (maxpage,mark) = aux xs in
        if maxpage < p then (p,Some(m))
        else (maxpage,mark)
      | [] -> (-1,None)
    in
    let (_,m) = aux !ref-mark in
    m
end


