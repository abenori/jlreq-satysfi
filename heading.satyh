@require: list
@require: option
@require: fss/fss
@require: fss/style
@import: base
@import: lib
@import: mark
@import: toc
@import: pagenum

type block-heading-gyodori = 
  | GyodoriCenter of float
  | BeforeLines of float * float
  | BeforeLength of float * length
  | AfterLines of float * float
  | AfterLength of float * length
  | Absolute of length * length

type block-heading-subtitle-indent = SubTitleNoBreak | SubTitleIndent of bool * (length -> (string -> length option) -> length)

type jlreq-block-heading-config = (|
  level : int;
  font : style list;
  label-font : style list;
  subtitle-font : style list;
  gyodori : block-heading-gyodori;
  label-format : int -> string;
  reference-label-format : int -> string;
  subtitle-format : inline-text -> inline-text;
  indent : length -> (string -> length option) -> length;
  end-indent : length -> (string -> length option) -> length;
  after-label-space : length -> (string -> length option) -> length;
  % ラベル頭起点にするならば一つ目をtrueにする．
  second-heading-text-indent : bool * (length -> (string -> length option) -> length);
  subtitle-indent : block-heading-subtitle-indent;
  reset-counters : (int ref) list;
  clear-mark-levels : int list;
  mark-format : inline-text -> inline-text -> inline-text;
  add-to-toc : bool;
|)

type jlreq-run-in-heading-config = (|
  level : int;
  font : style list;
  indent : length -> (string -> length option) -> length;
  after-label-space : length -> (string -> length option) -> length;
  after-space : length -> (string -> length option) -> length;
  label-format : int -> string;
  reference-label-format : int -> string;
  mark-format : inline-text -> inline-text -> inline-text;
  clear-mark-levels : int list;
  reset-counters : (int ref) list;
  add-to-toc : bool;
|)

module JLReqHeading : sig
  val block-heading-scheme : jlreq-block-heading-config -> int ref -> context -> string ?-> inline-text ?-> inline-text ?-> inline-text -> block-text -> block-boxes
  val default-config-block-heading : jlreq-block-heading-config

  val block-heading-scheme-nocounter : 'a -> context -> inline-text ?-> inline-text ?-> inline-text -> block-text -> block-boxes
    constraint 'a :: (|
      level : int;
      font : style list;
      subtitle-font : style list;
      gyodori : block-heading-gyodori;
      subtitle-format : inline-text -> inline-text;
      indent : (length -> (string -> length option) -> length);
      end-indent : length -> (string -> length option) -> length;
      second-heading-text-indent : (length -> (string -> length option) -> length);
      subtitle-indent : block-heading-subtitle-indent;
      clear-mark-levels : int list;
      mark-format : inline-text -> inline-text;
      add-to-toc : bool;
    |)

  val run-in-heading-scheme : jlreq-run-in-heading-config -> int ref -> context -> string ?-> inline-text ?-> inline-text -> inline-text -> block-boxes
  val default-config-run-in-heading : jlreq-run-in-heading-config

end = struct
  let-inline ctx \hspace len = inline-skip (JLReqLib.get-length ctx len)
  let get-zw-length ratio l f =
    match (f `ja`) with
    | None -> l *' ratio
    | Some(ll) -> ll *' ratio

  let default-config-block-heading = (|
    level = 0;
    font = [];
    label-font = [];
    subtitle-font = [];
    gyodori = GyodoriCenter(2.0);
    label-format = arabic;
    reference-label-format = arabic;
    subtitle-format = (fun s -> {—#s;—});
    indent = (fun _ _ -> 0pt);
    end-indent = (fun _ _ -> 0pt);
    after-label-space = (get-zw-length 1.0);
    second-heading-text-indent = (false,(get-zw-length 1.0));
    subtitle-indent = SubTitleIndent(false,(get-zw-length 1.0));
    reset-counters = [];
    clear-mark-levels = [];
    mark-format = (fun cnt txt -> {#cnt;\hspace(get-zw-length 1.0);#txt;});
    add-to-toc = true;
  |)

  let default-config-run-in-heading = (|
    level = 0;
    font = [];
    indent = (fun _ _ -> 0pt);
    after-label-space = (get-zw-length 1.0);
    after-space = (get-zw-length 1.0);
    label-format = arabic;
    reference-label-format = arabic;
    mark-format = (fun cnt txt -> {#cnt;\hspace(get-zw-length 1.0);#txt;});
    clear-mark-levels = [];
    reset-counters = [];
    add-to-toc = true;
  |)


  %. 別行見出し
  let block-heading-scheme config counter ctx ?:label ?:runninghead ?:subtitle heading block =
    let font-size = get-font-size ctx in
    let mult-font-size lang =
      let (w,_,_) = get-natural-metrics (read-inline ctx {阿}) in
      if (String.equal lang `ja`) then Some(w) else None
    in
    let get-length f = f font-size mult-font-size in
    let () = counter <- !counter + 1 in
    let _ = List.map (fun cnt -> (cnt <- 0)) config#reset-counters in
    let hookbox = 
      match label with
      | None -> inline-nil
      | Some(l) -> 
        let () = register-cross-reference (l ^ `:num`) (config#label-format !counter) in
        let hookfunc pbinfo pt =
          register-cross-reference (l ^ `:page`)  (JLReqPageNumber.get-page-number-str pbinfo)
        in
        hook-page-break hookfunc
    in
    let tocheading = Option.from heading runninghead in
    let i-label = embed-string (config#label-format !counter) in
    let register-mark-box = 
      List.fold-left (fun a b -> a ++ (JLReqMark.set-mark b {}))
       (JLReqMark.set-mark config#level (config#mark-format i-label tocheading))
       config#clear-mark-levels
    in
    let toc-box = 
      if config#add-to-toc then
        JLReqTOC.add-contents-line config#level {#i-label;\hspace(config#after-label-space);#heading;}
      else
        inline-nil
    in
    let label-box = register-mark-box ++ toc-box ++
      hookbox ++
      (read-inline ctx {\font-style (config#label-font) {\font-style (config#font) {#i-label;}}})
    in
    let (label-length,_,_) = get-natural-metrics label-box in
    let heading-text-indent = 
      let (fromlabel,len) = config#second-heading-text-indent in
      if fromlabel then
        get-length len
      else
        label-length +' (get-length config#after-label-space) +' (get-length len)
    in
    let get-pads indent end-indent = (indent, end-indent, 0pt, 0pt) in
    let decos =
      let deco _ _ _ _ = [] in
      (deco, deco, deco, deco)
    in
    let label-heading-box = 
      (inline-skip (0pt -' heading-text-indent)) ++ label-box ++ (inline-skip (get-length config#after-label-space)) ++ 
      (read-inline ctx {\font-style (config#font) {#heading;}})
    in
    let output c =
      let (first-boxes,second-boxes) = % inline-box, block-box
        match subtitle with
        | None -> (label-heading-box,block-nil)
        | Some(subt) ->
          let subtitle-txt = config#subtitle-format subt in
          match config#subtitle-indent with
          | SubTitleNoBreak ->
            (label-heading-box ++ (read-inline c {\font-style (config#subtitle-font) {#subtitle-txt;}}),block-nil)
          | SubTitleIndent(fromlabel,l) ->
            let len = get-length l in
            let outputsubtitle cc =
              line-break false false cc ((read-inline cc {\font-style (config#subtitle-font) {#subtitle-txt;}}) ++ inline-fil)
            in
            let subtitle-indent = if fromlabel then len else len +' label-length +' (get-length config#after-label-space) in
            (label-heading-box, block-frame-breakable c (get-pads subtitle-indent 0pt) decos outputsubtitle)
      in
      let outputheading cc =
        line-break false false cc (first-boxes ++ inline-fil)
      in
      (
        block-frame-breakable c (get-pads heading-text-indent 0pt) decos outputheading
      ) +++ second-boxes
    in
    let heading-blockbox = block-frame-breakable (set-paragraph-margin 0pt 0pt ctx) (get-pads (get-length config#indent) (get-length config#end-indent)) decos output in
    let (before-space,after-space) = 
      let baselineskip = JLReqLib.get-leading ctx in
      let line-gap = 
        let (_,h,d) = get-natural-metrics (read-inline ctx {阿}) in
        baselineskip -' (h +' d)
      in
      match config#gyodori with
      | GyodoriCenter(l) ->
        let len = (baselineskip *' l +' line-gap -' (get-natural-length heading-blockbox)) *' 0.5 in
        (len -' line-gap,len -' line-gap)
      | BeforeLines(l,n) -> 
        let len = (baselineskip *' l +' line-gap -' (get-natural-length heading-blockbox)) *' 0.5 in
        (len +' (baselineskip *' n),len)
      | AfterLines(l,n) ->
        let len = (baselineskip *' l +' line-gap -' (get-natural-length heading-blockbox)) *' 0.5 in
        (len,len +' (baselineskip *' n))
      | BeforeLength(l,b) -> 
        let len = (baselineskip *' l +' line-gap -' (get-natural-length heading-blockbox)) *' 0.5 in
        (b -' line-gap,len -' b -' line-gap)
      | AfterLength(l,a) ->
        let len = (baselineskip *' l +' line-gap -' (get-natural-length heading-blockbox)) *' 0.5 in
        (len -' a -' line-gap,a -' line-gap)
      | Absolute(b,a) ->
        (b -' line-gap,a -' line-gap)
    in
    let final-box = 
      (block-skip before-space) +++
      heading-blockbox
      +++ (block-skip after-space)
    in
    % 改ページしないための処理（これでいいのかな？）
    let target-txt = embed-block-breakable ctx final-box in
    let (w,h,d) = get-natural-metrics target-txt in
    line-break true false ctx (inline-graphics w h d (fun pt ->  [draw-text pt target-txt]))
    +++ (read-block ctx block)

  let-mutable dummy-counter <- 0

  let block-heading-scheme-nocounter config ctx =
    block-heading-scheme (|
      font = config#font;
      label-font = [];
      subtitle-font = config#subtitle-font;
      gyodori = config#gyodori;
      label-format = (fun _ -> ` `);
      subtitle-format = config#subtitle-format;
      indent = config#indent;
      end-indent = config#end-indent;
      after-label-space = (fun _ _ -> 0pt);
      second-heading-text-indent = (false,config#second-heading-text-indent);
      subtitle-indent = config#subtitle-indent;
      reset-counters = [];
      level = config#level;
      clear-mark-levels = config#clear-mark-levels;
      mark-format = (fun cnt txt -> config#mark-format txt);
      add-to-toc = config#add-to-toc;
    |) dummy-counter ctx ?*

  let run-in-heading-scheme config counter ctx ?:label ?:runhead heading inner =
    let () = counter <- !counter + 1 in
    let _ = List.map (fun cnt -> (cnt <- 0)) config#reset-counters in
    let register-ref-box = 
      match label with
      | None -> inline-nil
      | Some(l) -> (
        let () = register-cross-reference (l ^ `:num`) (config#reference-label-format !counter) in
        let hook pbinfo pt =
          register-cross-reference (l ^ `:page`)  (JLReqPageNumber.get-page-number-str pbinfo)
        in
        hook-page-break hook
      )
    in
    let i-label = embed-string (config#label-format !counter) in
    let markhead = Option.from heading runhead in
    let mark-box = 
      List.fold-left (fun a b -> a ++ (JLReqMark.set-mark b {}))
       (JLReqMark.set-mark config#level (config#mark-format i-label markhead))
       config#clear-mark-levels
    in
    let toc-box = 
      if config#add-to-toc then
        JLReqTOC.add-contents-line config#level {#i-label;\hspace(config#after-label-space);#heading;}
      else
        inline-nil
    in
    line-break true true ctx (
      register-ref-box ++ mark-box ++ toc-box ++ (inline-skip (JLReqLib.get-length ctx config#indent)) ++ 
      (read-inline ctx {\font-style (config#font) {#i-label;}}) ++
      (inline-skip (JLReqLib.get-length ctx config#after-label-space)) ++
      (read-inline ctx {\font-style (config#font) {#heading;}}) ++
      (inline-skip (JLReqLib.get-length ctx config#after-space)) ++
      (read-inline ctx inner) ++ inline-fil
    )


end