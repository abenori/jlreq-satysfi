@require: list
@require: fss/fss
@require: fss/style
@import: base
@import: lib
@import: pagenum

module JLReqTOC : sig
  val add-contents-line : int -> string ?-> inline-text -> inline-boxes
  val table-of-contents : context -> (int * (inline-text -> string -> block-boxes)) list -> block-boxes
end = struct

  let-mutable ref-tocs <- [] % (level,page,toc)
  let-mutable ref-tocs-counter <- 0
  % レベル<level>の目次，中身はtocを挿入する．ページ数はpageopt，省略するとそのページのページ数
  let add-contents-line level ?:pageopt toc =
    let (page,rv) = 
      match pageopt with
      | None -> 
        let () = ref-tocs-counter <- !ref-tocs-counter + 1 in
        let label = `jlreq-toc-label-` ^ (arabic !ref-tocs-counter) in
        let p = get-cross-reference label in
        let hook pbinfo _ = register-cross-reference label (JLReqPageNumber.get-page-number-str pbinfo) in
        (p,hook-page-break hook)
      | Some(p) -> (Some(p),inline-nil)
    in
    let () = ref-tocs <- List.append !ref-tocs [(level,page,toc)] in
    rv
  
  % デフォルトの目次出力．
  let default-formatter ctx minlevel level txt page =
  	let font-size = get-font-size ctx in
    line-break true true ctx (
      inline-skip (font-size *' (float (level - minlevel))) ++ 
      (read-inline ctx txt) ++ 
      inline-fil ++ 
      (read-inline ctx (embed-string page))
    )
  
  % 目次出力．
  % formatters : [level,(text,page)->inline-boxes]
  let table-of-contents ctx formatters =
    let p-formatter p =
      match p with
      | None -> `??`
      | Some(pp) -> pp
    in
    let-rec get-minlevel lst =
      match lst with
      | [] -> None
      | x :: xs ->
        let (l,_,_) = x in
        match get-minlevel xs with
        | None -> Some(l)
        | Some(m) ->
          if l < m then Some(l) else Some(m) 
    in
    match get-minlevel !ref-tocs with
    | None -> block-nil
    | Some(minlevel) ->
      let-rec format lst level i-text page =
        match lst with
        | [] -> default-formatter ctx minlevel level i-text (p-formatter page)
        | x :: xs -> 
          let (l,f) = x in
          if l == level then f i-text (p-formatter page)
          else format xs level i-text page
      in
      let-rec build-toc b-b lst =
        match lst with
        | [] -> b-b
        | x :: xs ->
          let (level,page,toc) = x in
          (format formatters level toc page) +++ (build-toc b-b xs)
      in
      build-toc block-nil !ref-tocs
  

end
