% -*- coding: utf-8 -*-
@require: option
@require: list
@require: math
@require: fss/fss
@require: fss/style
@require: fss/fonts
@import: lib
@import: base
@import: heading
@import: footnote
@import: pagestyle
@import: toc
@import: theorem
@import: paragraph
@import: jlreq0

type kihon-hanmen-horizontal = 
  | HorizontalAuto
  | HorizontalCenter of (length -> (string -> length option) -> length)
  | Gutter of (|
      line-length : (length -> (string -> length option) -> length);
      gutter : (length -> (string -> length option) -> length);
   |)
  | GutterFore-edge of (|
      gutter : (length -> (string -> length option) -> length);
      fore-edge : (length -> (string -> length option) -> length);
    |)

type kihon-hanmen-vertical =
   | VerticalAuto
   | VerticalCenter of (length -> (string -> length option) -> length)
   | Top of (|
       block-length : (length -> (string -> length option) -> length);
       top-space : (length -> (string -> length option) -> length);
     |)
   | TopBottom of (|
       top-space : (length -> (string -> length option) -> length);
       bottom-space : (length -> (string -> length option) -> length);
     |)

type config-cjkfont =
  | CJKFont-preset-ipaex of float
  | CJKFont of (|
    mincho : string * float * float;
    gothic : string * float * float;
  |)

type config-latinfont = 
  | LatinFont-preset-lmodern of float
  | LatinFont of (|
    roman : string * float * float;
    italic : string * float * float;
    sans : string * float * float;
  |)

type config-document = (|
  two-side : bool;
  paper-size : page;
  horizontal-layout : kihon-hanmen-horizontal;
  vertical-layout : kihon-hanmen-vertical;
  header-sep : (length -> (string -> length option) -> length);
  header-height : (length -> (string -> length option) -> length);
  line-gap : length;
  font-size : length;
  font : fss-font-set;
  column : int;
  column-gap : (length -> (string -> length option) -> length);
|)

module JLReq : sig
  val default-config-document : config-document
  val default-config-part : jlreq-block-heading-config
  val default-config-section : jlreq-block-heading-config
  val default-config-subsection : jlreq-block-heading-config
  val default-config-paragraph : jlreq-run-in-heading-config
  

  val document : (|
      title : inline-text;
      author : inline-text;
      date : inline-text;
      show-toc : bool;
      show-title : bool;
    |) -> config-document ?-> (|
      maketitle : context -> inline-text -> inline-text -> inline-text -> block-boxes;
      table-of-contents : context -> block-boxes -> block-boxes;
    |) ?-> block-text ?-> block-text -> document
  val default-format : (|
    maketitle : context -> inline-text -> inline-text -> inline-text -> block-boxes;
    table-of-contents : context -> block-boxes -> block-boxes;
  |)
  val \hspace : [(length -> (string -> length option) -> length)] inline-cmd
  val float-scheme : (|
    caption-font : style list;
    caption-label-font : style list;
    caption-after-label-space : (length -> (string -> length option) -> length);
    caption-label-format : int -> inline-text;
  |) -> int ref -> context -> string ?-> inline-text -> block-text -> inline-boxes
  
  direct +p : [inline-text] block-cmd
  direct +pn : [inline-text] block-cmd
  direct +part : [string?; inline-text?; inline-text?; inline-text; block-text] block-cmd
  direct +section : [string?; inline-text?; inline-text?; inline-text; block-text] block-cmd
  direct +subsection : [string?; inline-text?; inline-text?; inline-text; block-text] block-cmd
  direct +paragraph : [string?; inline-text?; inline-text; inline-text] block-cmd
  val part-counter : int ref
  val section-counter : int ref
  val subsection-counter : int ref
  val paragraph-counter : int ref
  
  direct \ref : [string] inline-cmd
  direct \ref-page : [string] inline-cmd
  direct \footnote : [inline-text] inline-cmd
  val footnote-counter : int ref
  val default-config-footnote : jlreq-footnote-config
  direct \figure : [string?; inline-text; block-text] inline-cmd
end = struct
  let get-zw-length ratio l f =
    match (f `ja`) with
    | None -> l *' ratio
    | Some(ll) -> ll *' ratio
  let default-config-document = (|
    two-side = false;
    paper-size = A4Paper;
    horizontal-layout = HorizontalAuto;
    vertical-layout = VerticalAuto;
    header-sep  = (get-zw-length 1.0);
    header-height = (get-zw-length 1.0);
    font-size = 10pt;
    line-gap = 7pt;
    font = FssFonts.default-font-set;
    column = 1;
    column-gap = (get-zw-length 2.0);
  |)
  
  let paper-size-to-width-height ps = 
    match ps with 
      | A0Paper -> (841mm,1189mm)
      | A1Paper -> (594mm,841mm)
      | A2Paper -> (420mm,594mm)
      | A3Paper -> (297mm,420mm)
      | A4Paper -> (210mm,297mm)
      | A5Paper -> (148mm,210mm)
      | USLegal -> (8.5inch,14inch)
      | USLetter -> (8.5inch,11inch)
      | UserDefinedPaper(w,h) -> (w,h)
  
  let-mutable ref-autoreference-counter <- 0
  
  %. 相互参照系
  let output-cross-reference ctx l =
    let ref-txt = 
      match (get-cross-reference l) with
      | None -> {?}
      | Some(s) -> embed-string s
    in
    read-inline ctx ref-txt
  let-inline ctx \ref l = output-cross-reference ctx (l ^ `:num`)
  let-inline ctx \ref-page l = output-cross-reference ctx (l ^ `:page`)
  
  %. スペース
  let-inline ctx \hspace len = inline-skip (JLReqLib.get-length ctx len)
  
  %. 基本版面保持
  let-mutable ref-kihonhanmen <- (|
  |)
  
  %. フロート
  let-mutable ref-float-boxes <- []
  let-mutable ref-no-float-pages <- []
  let float-margin = (fun l -> l *' 1.2)
  let float-scheme config counter ctx ?:label caption inner =
  	let font-size = get-font-size ctx in
    let () = counter <- !counter + 1 in
    let () = match label with
      |None -> ()
      |Some(l) -> register-cross-reference (l ^ `:num`) (arabic !counter)
    in
%    let caption-ctx = JLReqFont.select-font config#caption-font ctx in
%    let label-ctx = JLReqFont.select-font config#caption-label-font caption-ctx in
    let caption-it = config#caption-label-format !counter in
    let b-caption =
      (read-inline ctx {\font-style (config#caption-font) {#caption-it;}}) ++
      (inline-skip (JLReqLib.get-length ctx config#caption-after-label-space)) ++
      (read-inline ctx {\font-style (config#caption-font) {#caption;}})
    in
    let bb-inner =
      let d (_, _) _ _ _ = [] in
      block-frame-breakable ctx (2pt, 2pt, 2pt, 2pt) (d, d, d, d) (fun ctx -> (
        (read-block ctx inner) +++
        (line-break true true ctx (inline-fil ++ b-caption ++ inline-fil))
      ))
    in
    let () = ref-autoreference-counter <- !ref-autoreference-counter + 1 in
    let curpage-label = `footnote-scheme-auto-reference:` ^ (arabic !ref-autoreference-counter) in
    let curpage = 
      match get-cross-reference curpage-label with
      | None -> None
      | Some(s) -> (JLReqLib.string-to-int s)
    in
    let hook pbinfo _ =
      let () = register-cross-reference curpage-label (arabic pbinfo#page-number) in
      match curpage with
      | None -> (ref-float-boxes <- (pbinfo#page-number + 1,bb-inner) :: !ref-float-boxes)
      | Some(_) -> ()
    in
    let () =
      match curpage with
      | None -> ()
      | Some(p) -> (ref-float-boxes <- (p,bb-inner) :: !ref-float-boxes)
    in
    hook-page-break hook
  
  let-mutable figure-counter <- 0
  let-inline ctx \figure = float-scheme (|
      caption-font = [bold];
      caption-label-font = [bold];
      caption-after-label-space = (get-zw-length 1.0);
      caption-label-format = (fun n -> embed-string (arabic n));
    |) figure-counter ctx

  
  %. 見出し
  let-mutable part-counter <- 0
  let-mutable section-counter <- 0
  let-mutable subsection-counter <- 0
  let-mutable paragraph-counter <- 0
  let part-level = -1
  let section-levek = 0
  let subsection-level = 1
  let paragraph-level = 2
  let default-config-part = (|
    level = -1;
    font = [bold;with-font-size (fun l -> l *' 1.7)];
    label-font = [];
    subtitle-font = [bold;with-font-size (fun l -> l *' 1.4)];
    gyodori = GyodoriCenter(4.0);
    label-format = (fun n -> (`第` ^ (arabic n) ^ `部`));
    reference-label-format = (fun n -> arabic n);
    subtitle-format = (fun s -> {—#s;—});
    indent = ~(jlreq-length @`0pt`);
    end-indent = ~(jlreq-length @`0pt`);
    after-label-space = (get-zw-length 1.0);
    second-heading-text-indent = (false,(get-zw-length 1.0));
    subtitle-indent = SubTitleIndent(false,(get-zw-length 1.0));
    reset-counters = [];    
    mark-format = (fun cnt txt -> {#cnt;\hspace(get-zw-length 1.0);#txt;});
    clear-mark-levels = [];
    add-to-toc = true;
  |)
  let-block ctx +part = JLReqHeading.block-heading-scheme default-config-part part-counter ctx
  let default-config-subsection = (|
    level = 1;
    font = [bold;with-font-size (fun l -> l *' 1.2)];
    label-font = [];
    subtitle-font = [bold];
    gyodori = GyodoriCenter(2.0);
    label-format = (fun n -> (arabic !section-counter) ^ `.` ^ (arabic n));
    reference-label-format = (fun n -> (arabic !section-counter) ^ `.` ^ (arabic n));
    subtitle-format = (fun s -> {—#s;—});
    indent = ~(jlreq-length @`0pt`);
    end-indent = ~(jlreq-length @`0pt`);
    after-label-space = ~(jlreq-length @`1zw`);
    second-heading-text-indent = (false,~(jlreq-length @`1zw`));
    subtitle-indent = SubTitleIndent(false,~(jlreq-length @`1zw`));
    reset-counters = [paragraph-counter];
    mark-format = (fun cnt txt -> {#cnt;\hspace(~(jlreq-length @`1zw`));#txt;});
    clear-mark-levels = [];
    add-to-toc = true;
  |)
  let-block ctx +subsection = JLReqHeading.block-heading-scheme default-config-subsection subsection-counter ctx
  let default-config-section = (|
    level = 0;
    font = [bold;with-font-size (fun l -> l *' 1.4)];
    label-font = [];
    subtitle-font = [bold];
    gyodori = GyodoriCenter(3.0);
    label-format = arabic;
    reference-label-format = arabic;
    subtitle-format = (fun s -> {—#s;—});
    indent = ~(jlreq-length @`0pt`);
    end-indent = ~(jlreq-length @`0pt`);
    after-label-space = ~(jlreq-length @`1zw`);
    second-heading-text-indent = (false,~(jlreq-length @`1zw`));
    subtitle-indent = SubTitleIndent(false,~(jlreq-length @`1zw`));
    reset-counters = [subsection-counter; paragraph-counter];
    mark-format = (fun cnt txt -> {#cnt;\hspace(~(jlreq-length @`1zw`));#txt;});
    clear-mark-levels = [default-config-subsection#level];
    add-to-toc = true;
  |)
  let-block ctx +section = JLReqHeading.block-heading-scheme default-config-section section-counter ctx
  let default-config-paragraph = (|
    level = 2;
    font = [bold];
    indent = ~(jlreq-length @`0pt`);
    after-label-space = ~(jlreq-length @`1zw`);
    after-space = ~(jlreq-length @`1zw`);
    label-format = (fun cnt -> ((arabic !section-counter) ^ `.` ^ (arabic !subsection-counter) ^ `.` ^ (arabic cnt)));
    reference-label-format = (fun cnt -> (arabic !section-counter) ^ `.` ^ (arabic !subsection-counter) ^ `.` ^ (arabic cnt));
    mark-format = (fun cnt txt -> {#cnt;\hspace(~(jlreq-length @`1zw`));#txt;});
    clear-mark-levels = [];
    reset-counters = [];
    add-to-toc = true;
  |)
  let-block ctx +paragraph = JLReqHeading.run-in-heading-scheme default-config-paragraph paragraph-counter ctx


  let-mutable footnote-counter <- 0
  let default-config-footnote = (|
    reference-mark-type = Inline;
    reference-mark-font = [with-font-size (fun l -> l *' 0.6)];
    font = [with-font-size (fun l -> l *' 0.68)];
    line-gap = (get-zw-length 0.675);
    reference-mark-format = (fun n -> (arabic n) ^ `)`);
    indent = ~(jlreq-length @`0pt`);
    second-indent = ~(jlreq-length @`1zw`);
  |)
  let-inline ctx \footnote = JLReqFootnote.footnote-scheme default-config-footnote footnote-counter ctx
  
  %. 段落
  let-block ctx +p it = line-break true true ctx (JLReqParagraph.get-paragraph-boxes (| indent = ~(jlreq-length @`1zw`);|) ctx it)
  let-block ctx +pn it = line-break true true ctx (JLReqParagraph.get-paragraph-boxes (| indent = ~(jlreq-length @`0pt`);|) ctx it)
  
  %. maketitle
  let maketitle ctx title author date =
    let get-b font txt =
      let ib = read-inline ctx {\font-style (font) {#txt;}} in
      let (len,_,_) = get-natural-metrics ib in
      if len >' 0pt then
        line-break false false ctx (inline-fil ++ ib ++ inline-fil)
      else
        block-nil
    in
    let title-b = get-b [with-font-size (fun l -> l *' 1.7)] title in
    let author-b = get-b [with-font-size (fun l -> l *' 1.3)] author in
    let date-b = get-b [with-font-size (fun l -> l *' 1.3)] date in
    let font-size = get-font-size ctx in
    let skip box length =
      if (get-natural-length box) >' 0pt then
        block-skip length
      else
        block-nil
    in
    title-b +++ (skip title-b (font-size *' 1.5)) +++ author-b +++ (skip author-b (font-size *' 1.5)) +++ date-b +++ (skip date-b (font-size *' 1.5))
  
  let toc ctx tocs = 
    let font-size = get-font-size ctx in
    block-skip font-size +++ 
    line-break false false ctx (read-inline ctx {\font-style [bold;with-font-size (fun l -> l *' 1.4)] {目次}} ++ inline-fil) +++
    block-skip font-size +++ 
    tocs +++
    block-skip (font-size *' 1.7)


  let default-format = (|
    maketitle = maketitle;
    table-of-contents = toc;
  |)
  
  %. document
  let-block ctx +maketitle mf title author date = mf ctx title author date
  let-block ctx +toc gf tf = 
    let tocs = gf ctx [] in
    tf ctx tocs

  let document record ?:configopt ?:formatopt ?:frontmatter inner =
    let config = Option.from default-config-document configopt in
    let formats = Option.from default-format formatopt in
    % check column
    let () = 
      if (config#column <> 1) && (config#column <> 2) then
        abort-with-message `Only column = 1 or column = 2 is supported`
      else
        ()
    in
    let get-standard-context width = 
      get-initial-context width (command \math) 
        |> set-dominant-wide-script Kana
        |> set-language Kana Japanese
        |> set-language HanIdeographic Japanese
        |> set-dominant-narrow-script Latin
        |> set-language Latin English
        |> set-math-font `lmodern`
        |> set-hyphen-penalty 100
        |> set-min-gap-of-lines 0pt
    in

    let (paper-width,paper-height) = paper-size-to-width-height config#paper-size in
    % 30cmに意味はない
    let get-length = JLReqLib.get-length (get-standard-context 30cm) in
    let column-gap = get-length config#column-gap in
    let (odd-left-margin,odd-right-margin) = 
      match config#horizontal-layout with 
      | HorizontalAuto -> 
        let tw = paper-width *' 0.75 in
        let twmod = config#font-size *' (float (round (tw /' config#font-size))) in
        ((paper-width -' twmod) *' 0.5,(paper-width -' twmod) *' 0.5)
      | HorizontalCenter(n) -> 
        let len = get-length n in
        let m = (paper-width -' len) *' 0.5 in
        (m,m)
      | Gutter(gd) -> 
        let len = ((get-length gd#line-length) *' (float config#column)) +'  (column-gap *' (float (config#column - 1))) in
        let gutter = get-length gd#gutter in
        (gutter,paper-width -' len -' gutter)
      | GutterFore-edge(gfe) ->
        let gutter = get-length gfe#gutter in
        let fore-edge = get-length gfe#fore-edge in
        (gutter,fore-edge)
    in
    % 1.0ptはおまじない……
    let text-width = (paper-width -' odd-left-margin -' odd-right-margin +' 1.0pt -' (column-gap *' (float (config#column - 1)))) *' (1.0 /. (float config#column)) in
    let (top-space,bottom-space) = 
      match config#vertical-layout with
      | VerticalAuto -> (paper-height *' 0.125,paper-height *' 0.125)
      | VerticalCenter(n) ->
        let len = get-length n in
        let s = (paper-height -' len) *' 0.5 in
        (s,s)
      | Top(td) ->
        let top-space = get-length td#top-space in
        let len = get-length td#block-length in
        (top-space,paper-height -' len -' top-space)
      | TopBottom(tbd)->
        let top-space = get-length tbd#top-space in
        let bottom-space = get-length tbd#bottom-space in
        (top-space,bottom-space)
    in
    let get-left-margin pagenum =
      if config#two-side && (pagenum mod 2 == 0) then
        odd-right-margin
      else
        odd-left-margin
    in
    let max-float-height = (paper-height -' top-space -' bottom-space) *' 0.5 in
    let is-no-float-page pbinfo =
      List.fold-left (fun b p -> (if p == pbinfo#page-number then true else b)) false !ref-no-float-pages
    in
    let height-of-float-boxes pbinfo =
      if is-no-float-page pbinfo then (0pt,0)
      else
        (!ref-float-boxes) |> List.fold-left (fun (h,n) (pn, bb) -> (
          if pn > pbinfo#page-number then (h,n)
          else
            let hh = h +' (get-natural-length bb) +' (float-margin config#font-size) in
            if hh <' max-float-height || n == 0 then (hh,n + 1)
            else (h,n)
        )) (0pt,0)
    in
    let () = if record#show-title then ref-no-float-pages <- 1 :: !ref-no-float-pages else () in
    let page-layout pbinfo =
      let (hofb,_) = height-of-float-boxes pbinfo in
      let xpoint = get-left-margin (JLReqPageNumber.get-page-number pbinfo) in
      (|
        text-origin = (xpoint,top-space +' hofb);
        text-height = paper-height -' top-space -' bottom-space -' hofb;
      |)
    in
    let head-height = get-length config#header-height in
    let head-sep = get-length config#header-sep in
    let () = ref-kihonhanmen <- (|
    |) in
    let pagestyle pbinfo = 
      let ctx = get-standard-context text-width in
      let (h,f) = 
        if config#two-side && ((JLReqPageNumber.get-page-number pbinfo) mod 2 == 0) then 
          (JLReqPageStyle.even-header,JLReqPageStyle.even-footer)
        else
          (JLReqPageStyle.odd-header,JLReqPageStyle.odd-footer)
      in
      let hc = h ctx pbinfo (JLReqPageNumber.get-page-number-str pbinfo) in
      let fc = f ctx pbinfo (JLReqPageNumber.get-page-number-str pbinfo) in
      let xpoint = get-left-margin (JLReqPageNumber.get-page-number pbinfo) in
      % フロートボックスの構築
      let (_,number-of-float-boxes) = height-of-float-boxes pbinfo in
      let (output-float-boxes,rest-float,_) = 
        if is-no-float-page pbinfo then (block-nil,!ref-float-boxes,0)
        else
        List.fold-right (fun (page,box) (o,r,n) -> (
          if (n >= number-of-float-boxes || page > pbinfo#page-number) then (o,(page,box) :: r,n)
          else
            let b = line-break true true (set-paragraph-margin 0pt (float-margin config#font-size) ctx)
              (inline-fil ++ (embed-block-top ctx text-width (fun _ -> box) ++ inline-fil))
            in
            (o +++ b,r,n + 1)
        )) (block-nil,[],0) !ref-float-boxes
      in
      let () = ref-float-boxes <- rest-float in
      (|
        header-content = hc +++ output-float-boxes;
        header-origin = (xpoint,top-space -' head-sep -' head-height);
        footer-content = fc;
        footer-origin = (xpoint,paper-height -' bottom-space +' head-sep);
      |)
    in
    let ctx-doc = get-standard-context text-width
      |> set-font-size config#font-size
      |> set-leading (config#font-size +' config#line-gap)
      |> set-paragraph-margin config#line-gap config#line-gap
    in
    let main-block = read-block ctx-doc '<+font-style [font-set config#font; font-size config#font-size] <#inner;>> in
    let title-b = 
      if record#show-title then read-block ctx-doc '<+font-style [font-set config#font;font-size config#font-size] <+maketitle (formats#maketitle) (record#title) (record#author) (record#date);>>
      else block-nil
    in
    let frontmatter-b =
      match frontmatter with
      | None -> block-nil
      | Some(f) -> read-block ctx-doc f
    in
    let toc-b = 
      if record#show-toc then 
        read-block ctx-doc '<+font-style [font-set config#font;font-size config#font-size] <+toc (JLReqTOC.table-of-contents) (formats#table-of-contents);>>
      else
        block-nil
    in
    let doc = 
      if config#column == 1 then
        page-break config#paper-size page-layout pagestyle (title-b +++ frontmatter-b +++ toc-b +++ main-block)
      else
        page-break-two-column config#paper-size (text-width +' column-gap) (fun () -> block-nil) page-layout pagestyle (title-b +++ frontmatter-b +++ toc-b +++ main-block) 
    in
    doc

end

let document = JLReq.document

