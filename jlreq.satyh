% -*- coding: utf-8 -*-
@require: option
@require: list
@require: math
@import: jlreq-base
@import: jlreq-font
@import: jlreq-heading
@import: jlreq-footnote
@import: jlreq-pagestyle

type kihon-hanmen-horizontal = 
  | HorizontalAuto
  | HorizontalCenter of zw-or-length
  | Gutter of (|
      block-length : zw-or-length;
      gutter : zw-or-length;
   |)
  | GutterFore-edge of (|
      gutter : zw-or-length;
      fore-edge : zw-or-length;
    |)

type kihon-hanmen-vertical =
   | VerticalAuto
   | VerticalCenter of zw-or-length
   | Top of (|
       line-length : zw-or-length;
       top-space : zw-or-length;
     |)
   | TopBottom of (|
       top-space : zw-or-length;
       bottom-space : zw-or-length;
     |)

type config-cjkfont =
  | CJKFont-preset-ipaex
  | CJKFont of (|
    mincho : string * float * float;
    gothic : string * float * float;
  |)

type config-latinfont = 
  | LatinFont-preset-lmodern
  | LatinFont of (|
    roman : string * float * float;
    italic : string * float * float;
    sans : string * float * float;
  |)

type config = (|
  twoside : bool;
  paper-size : page;
  horizontal-layout : kihon-hanmen-horizontal;
  vertical-layout : kihon-hanmen-vertical;
  header-sep : zw-or-length;
  header-height : zw-or-length;
  line-gap : length;
  font-size : length;
  cjk-font : config-cjkfont;
  latin-font : config-latinfont;
|)

module JLReq : sig
  val default-config : config

  val document : 'a -> config ?-> block-text -> document
    constraint 'a :: (|
      title : inline-text;
      author : inline-text;
      show-toc : bool;
      show-title : bool;
    |)
  direct +p : [inline-text] block-cmd
  direct +part : [string?; inline-text?; inline-text?; inline-text; block-text] block-cmd
  direct +section : [string?; inline-text?; inline-text?; inline-text; block-text] block-cmd
  direct +subsection : [string?; inline-text?; inline-text?; inline-text; block-text] block-cmd
  
  direct \ref : [string] inline-cmd
  direct \ref-page : [string] inline-cmd
  direct \footnote : [inline-text] inline-cmd
end = struct
  let default-config = (|
    twoside = false;
    paper-size = A4Paper;
    horizontal-layout = HorizontalAuto;
    vertical-layout = VerticalAuto;
    header-sep  = ZW(1.0);
    header-height = ZW(1.0);
    font-size = 10pt;
    line-gap = 7pt;
    cjk-font = CJKFont-preset-ipaex;
    latin-font = LatinFont-preset-lmodern;
  |)
  
  let paper-size-to-width-height ps = 
    match ps with 
      | A0Paper -> (841mm,1189mm)
      | A1Paper -> (594mm,841mm)
      | A2Paper -> (420mm,594mm)
      | A3Paper -> (297mm,420mm)
      | A4Paper -> (210mm,297mm)
      | A5Paper -> (148mm,210mm)
      | USLegal -> (8.5inch,14inch)
      | USLetter -> (8.5inch,11inch)
      | UserDefinedPaper(w,h) -> (w,h)
  
  %. 相互参照系
  let output-cross-reference ctx l =
    let ref-txt = 
      match (get-cross-reference l) with
      | None -> {?}
      | Some(s) -> embed-string s
    in
    read-inline ctx ref-txt
  let-inline ctx \ref l = output-cross-reference ctx (l ^ `:num`)
  let-inline ctx \ref-page l = output-cross-reference ctx (l ^ `:page`)
  
%  let-rec string-to-int s =
%    let len = string-length s in
%    if len == 0 then Some(0) else
%      let last-char = string-sub s (len - 1) 1 in
%      let n = 
%        match last-char with
%        |`0` -> Some(0)
%        |`1` -> Some(1)
%        |`2` -> Some(2)
%        |`3` -> Some(3)
%        |`4` -> Some(4)
%        |`5` -> Some(5)
%        |`6` -> Some(6)
%        |`7` -> Some(7)
%        |`8` -> Some(8)
%        |`9` -> Some(9)
%        |_ -> None
%      in
%      match n with 
%      |None -> None
%      |Some(m) ->
%        let k = string-to-int (string-sub s 0 (len - 1)) in
%        match k with
%        |None -> None
%        |Some(l) -> Some(10 * l + m)
%
%  let-mutable ref-auto-reference-number <- 0
%  let get-auto-reference-label = `jlreq-auto-reference:` ^ (arabic !ref-auto-reference-number)
%  let current-page =
%    let () = ref-auto-reference-number <- !ref-auto-reference-number + 1 in
%    let opt = get-cross-reference get-auto-reference-label in
%    let curpage = 
%      match opt with
%      |None -> None
%      |Some(s) -> string-to-int s
%    in
%    let hookfunc pbinfo point = register-cross-reference get-auto-reference-label (arabic pbinfo#page-number) in
%    let box = hook-page-break hookfunc in
%    (curpage,box)
  
  %. 基本版面保持
  let-mutable ref-kihonhanmen <- (|
  |)
  
  %. フロート？
  let-mutable ref-float-boxes <- []
  let height-of-float-boxes pageno =
    (!ref-float-boxes) |> List.fold-left (fun h (pn, bb) -> (
      if pn < pageno then h +' (get-natural-length bb) else h
    )) 0pt
  
  
  let-mutable part-counter <- 0
  let-mutable section-counter <- 0
  let-mutable subsection-counter <- 0
  let-block ctx +part =
    JLReqHeading.blockheading-scheme (|
      font = Sans(ZW(1.7));
      label-font = Current;
      subtitle-font = Sans(ZW(1.4));
      gyodori = GyodoriCenter(4.0);
      label-format = (fun n -> embed-string (`第` ^ (arabic n) ^ `部`));
      reference-label-format = (fun n -> arabic n);
      subtitle-format = (fun s -> {—#s;—});
      indent = Length(0pt);
      end-indent = Length(0pt);
      after-label-space = ZW(1.0);
      second-heading-text-indent = (false,ZW(1.0));
      subtitle-indent = SubTitleIndent(false,ZW(1.0));
      reset-counters = [];    
      mark-index = -1;
      mark-format = (fun cnt txt -> {#cnt;. #txt;})
    |) part-counter ctx
  let-block ctx +section =
    JLReqHeading.blockheading-scheme (|
      font = Sans(ZW(1.4));
      label-font = Current;
      subtitle-font = Sans(ZW(1.0));
      gyodori = GyodoriCenter(3.0);
      label-format = (fun n -> embed-string(arabic n));
      reference-label-format = (fun n -> arabic n);
      subtitle-format = (fun s -> {—#s;—});
      indent = Length(0pt);
      end-indent = Length(0pt);
      after-label-space = ZW(1.0);
      second-heading-text-indent = (false,ZW(1.0));
      subtitle-indent = SubTitleIndent(false,ZW(1.0));
      reset-counters = [subsection-counter];
      mark-index = 0;
      mark-format = (fun cnt txt -> {#cnt; #txt;})
    |) section-counter ctx
  
  let-block ctx +subsection =
    JLReqHeading.blockheading-scheme (|
      font = Sans(ZW(1.2));
      label-font = Current;
      subtitle-font = Sans(ZW(1.0));
      gyodori = GyodoriCenter(2.0);
      label-format = (fun n -> embed-string((arabic !section-counter) ^ `.` ^ (arabic n)));
      reference-label-format = (fun n -> (arabic !section-counter) ^ `.` ^ (arabic n));
      subtitle-format = (fun s -> {—#s;—});
      indent = Length(0pt);
      end-indent = Length(0pt);
      after-label-space = ZW(1.0);
      second-heading-text-indent = (false,ZW(1.0));
      subtitle-indent = SubTitleIndent(false,ZW(1.0));
      reset-counters = [];
      mark-index = 1;
      mark-format = (fun cnt txt -> {#cnt; #txt;})
    |) subsection-counter ctx


  let-mutable ref-footnote-counter <- 0
  let-inline ctx \footnote = JLReqFootnote.footnote-scheme (|
    reference-mark-type = Inline;
    reference-mark-font = Roman(ZW(0.6));
    font = Roman(ZW(0.8));
    line-gap = ZW(0.675);
    reference-mark-format = (fun n -> embed-string ((arabic n) ^ `)`));
    indent = Length(0pt);
    second-indent = ZW(1.0);
  |) ref-footnote-counter ctx
  
  %. 段落
  let-block ctx +p inner =
    let font-size = get-font-size ctx in
    let paragraph = (inline-skip font-size) ++ (read-inline ctx inner) ++ inline-fil in
    line-break true true ctx paragraph

  %. document
  let document record ?:configopt inner =
    let config = Option.from default-config configopt in
    % フォント設定
    let cjkfont = 
      match config#cjk-font with
      | CJKFont-preset-ipaex -> (|
          mincho = (`ipaexm`, 1.0, 0.0);
          gothic = (`ipaexg`, 1.0, 0.0);
        |)
      | CJKFont(f) -> f
    in
    let latinfont = 
      match config#latin-font with
      | LatinFont-preset-lmodern -> (|
          roman = (`lmroman`, 1.0, 0.0);
          italic = (`lmroman-it`, 1.0, 0.0);
          sans = (`lmroman-b`, 1.0, 0.0);
        |)
      | LatinFont(f) -> f
    in
    let () = JLReqFont.register-font config#font-size config#line-gap (|
      cjk = cjkfont;
      latin = latinfont;
    |)
    in
    let get-standard-context width = 
      get-initial-context width (command \math) 
        |> set-dominant-wide-script Kana
        |> set-language Kana Japanese
        |> set-language HanIdeographic Japanese
        |> set-dominant-narrow-script Latin
        |> set-language Latin English
        |> set-font Kana cjkfont#mincho
        |> set-font HanIdeographic cjkfont#mincho
        |> set-font Latin latinfont#roman
        |> set-math-font `lmodern`
        |> set-hyphen-penalty 100
        |> set-min-gap-of-lines 0pt
    in


    let (paper-width,paper-height) = paper-size-to-width-height config#paper-size in
    let zw-or-length-to-length v = 
      match v with
        | Length(l) -> l
        | ZW(n) -> config#font-size *' n
    in
    let (odd-left-margin,odd-right-margin) = 
      match config#horizontal-layout with 
      | HorizontalAuto -> 
        let tw = paper-width *' 0.75 in
        let twmod = config#font-size *' (float (round (tw /' config#font-size))) in
        ((paper-width -' twmod) *' 0.5,(paper-width -' twmod) *' 0.5)
      | HorizontalCenter(n) -> 
        let len = zw-or-length-to-length n in
        let m = (paper-width -' len) *' 0.5 in
        (m,m)
      | Gutter(gd) -> 
        let len = zw-or-length-to-length gd#block-length in
        let gutter = zw-or-length-to-length gd#gutter in
        (gutter,paper-width -' len -' gutter)
      | GutterFore-edge(gfe) ->
        let gutter = zw-or-length-to-length gfe#gutter in
        let fore-edge = zw-or-length-to-length gfe#fore-edge in
        (gutter,fore-edge)
    in
    % 1.0ptはおまじない……
    let text-width = paper-width -' odd-left-margin -' odd-right-margin +' 1.0pt in
    let (top-space,bottom-space) = 
      match config#vertical-layout with
      | VerticalAuto -> (paper-height *' 0.125,paper-height *' 0.125)
      | VerticalCenter(n) ->
        let len = zw-or-length-to-length n in
        let s= (paper-height -' len) *' 0.5 in
        (s,s)
      | Top(td) ->
        let top-space = zw-or-length-to-length td#top-space in
        let len = zw-or-length-to-length td#line-length in
        (top-space,paper-height -' len -' top-space)
      | TopBottom(tbd)->
        let top-space = zw-or-length-to-length tbd#top-space in
        let bottom-space = zw-or-length-to-length tbd#bottom-space in
        (top-space,bottom-space)
    in
    let get-left-margin pagenum =
      if config#twoside && (pagenum mod 2 == 0) then
        odd-right-margin
      else
        odd-left-margin
    in
    let page-layout pbinfo =
      let hgtfb = height-of-float-boxes pbinfo#page-number in
      let xpoint = get-left-margin pbinfo#page-number in
      (|
        text-origin = (xpoint,top-space +' hgtfb);
        text-height = paper-height -' top-space -' bottom-space
      |)
    in
    let head-height = zw-or-length-to-length config#header-height in
    let head-sep = zw-or-length-to-length config#header-sep in
    let () = ref-kihonhanmen <- (|
    |) in
    let pagestyle pbinfo = 
      let (h,f) = 
        if config#twoside && (pbinfo#page-number mod 2 == 0) then 
          (JLReqPageStyle.even-header,JLReqPageStyle.even-footer)
        else
          (JLReqPageStyle.odd-header,JLReqPageStyle.odd-footer)
      in
      let hc = h (get-standard-context text-width) pbinfo in
      let fc = f (get-standard-context text-width) pbinfo in
      let xpoint = get-left-margin pbinfo#page-number in
      (|
        header-content = hc;
        header-origin = (xpoint,top-space -' head-sep -' head-height);
        footer-content = fc;
        footer-origin = (xpoint,paper-height -' bottom-space +' head-sep);
      |)
    in
    let ctx-doc = get-standard-context text-width
      |> set-font-size config#font-size
      |> set-leading (config#font-size +' config#line-gap)
      |> set-paragraph-margin config#line-gap config#line-gap
    in
    let doc = page-break config#paper-size page-layout pagestyle
      (read-block ctx-doc inner)
    in
    doc

end

let document = JLReq.document

