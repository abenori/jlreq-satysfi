module JLReqMark : sig
  val set-mark : int -> inline-text -> inline-boxes
  val get-first-mark : int -> int -> inline-text option
  val get-last-mark : int -> int -> inline-text option
end = struct

  % (index,page,(first,last))
  let-mutable ref-mark <- []
  
  let set-mark index txt =
    let hook pbinfo _ =
      let-rec aux lst =
        match lst with
        | (i,p,(fm,lm)) :: xs -> 
          let (b,rest) = aux xs in
          if i == index && p == pbinfo#page-number then
            (true,(i,p,(fm,txt)) :: rest)
          else
            (b,(i,p,(fm,lm)) :: rest)
        | [] -> (false,[])
      in
      let (b,nlst) = aux !ref-mark in
      let newmarks = 
        if b then nlst
        else (index,pbinfo#page-number,(txt,txt)) :: nlst
      in
      ref-mark <- newmarks
    in
    hook-page-break hook
  
  let get-mark isfirst index page =
    let-rec aux lst =
      match lst with
      |[] -> (-1,None,None)
      |(i,p,(fm,lm)) :: xs -> (
        let (rp,rfm,rlm) = aux xs in
        if i == index && p <= page && rp < p then (p,Some(fm),Some(lm))
        else (rp,rfm,rlm)
       )
    in
    let (p,fm,lm) = aux !ref-mark in
    if isfirst && (p == page) then fm else lm

  let get-first-mark = get-mark true
  let get-last-mark = get-mark false

end


