@require: fss/fss
@require: fss/style
@require: pagenumber/pagenumber
@import: base
@import: paragraph
@import: lib
@import: jlreq0

type jlreq-theorem-config = (|
  before-space : (length -> (string -> length option) -> length);
  after-space : (length -> (string -> length option) -> length);
  font : style list;
  heading-font : style list;
  label-format : int -> string;
  after-label-space : (length -> (string -> length option) -> length);
|)

module JLReqTheorem : sig
  val theorem-scheme : jlreq-theorem-config -> inline-text -> int ref -> context -> string ?-> inline-text ?-> block-text -> block-boxes
  val default-config-theorem : jlreq-theorem-config

end = struct
  let default-config-theorem = (|
    before-space = ~(jlreq-length @`1.7zw`);
    after-space = ~(jlreq-length @`1.7zw`);
    font = [];
    heading-font = [bold];
    label-format = arabic;
    after-label-space = ~(jlreq-length @`1zw`);
  |)

  %. 定理環境
  let theorem-scheme config theorem-name counter ctx ?:label ?:heading inner =
    let font-size = get-font-size ctx in
    let (ja-font-size,_,_) = get-natural-metrics (read-inline ctx {阿}) in
    let ml-font-size lang =
      if (String.equal lang `ja`) then Some(ja-font-size)
      else None
    in
    let get-length f = f font-size ml-font-size in
    let () = counter <- !counter + 1 in
    let hookbox = 
      match label with
      | None -> inline-nil
      | Some(l) -> 
        let () = register-cross-reference (l ^ `:num`) (config#label-format !counter) in
        let hookfunc pbinfo pt =
          register-cross-reference (l ^ `:page`)  (PageNumber.get-page-string pbinfo#page-number)
        in
        hook-page-break hookfunc
    in
%    let heading-ctx = JLReqFont.select-font config#heading-font ctx in
    let subtitle-box = match heading with
      | None -> inline-nil
      | Some(s) -> (inline-skip (font-size *' 0.5) ++ (read-inline ctx {\font-style (config#heading-font) {(#s;)}}))
    in
    let cnt-it = embed-string (config#label-format !counter) in
    let heading-box = 
      hookbox ++ 
      (read-inline ctx {\font-style (config#heading-font) {#theorem-name;}}) ++
      (read-inline ctx {\font-style (config#heading-font) {#cnt-it;}}) ++
      subtitle-box ++
      inline-skip (get-length config#after-label-space)
    in
    let () = JLReqParagraph.set-paragraph-top-text heading-box in
    let decos =
      let deco _ _ _ _ = [] in
      (deco, deco, deco, deco)
    in
    JLReqLib.set-margin ctx true true (get-length config#before-space) (get-length config#after-space) (read-block ctx inner)
end
