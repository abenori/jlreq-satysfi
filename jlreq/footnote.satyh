@import: base
@import: font

type reference-mark-type = Interlinear | Inline

module JLReqFootnote : sig
  val footnote-scheme : 'a -> int ref -> context -> inline-text -> inline-boxes
    constraint 'a :: (|
      reference-mark-type : reference-mark-type;
      reference-mark-format : int -> inline-text;
      reference-mark-font : nfss;
      font : nfss;
      line-gap : zw-or-length;
      indent : zw-or-length;
      second-indent : zw-or-length;
    |)
end = struct
  %. 脚注
  let-mutable ref-footnote-exists-pages <- []
  let-mutable ref-footnote-label-numer <- 0
  let footnote-get-reference-mark-box ctx mark-type font format num =
    let mark-box = read-inline (JLReqFont.select-font font ctx) (format num) in
    let (length,height,depth) = get-natural-metrics mark-box in
    let font-size = get-font-size ctx in
    match mark-type with
    | Inline ->
      let shift-y = font-size *' 0.3 in
      let draw (x,y) = [
          draw-text (x, y +' shift-y) mark-box;
        ]
      in
      let b = inline-graphics length (depth +' shift-y) height draw in
      discretionary 10000 b b b
    | Interlinear ->
      let draw (x,y) =
        [
          draw-text (x -' length, y +' font-size) mark-box;
        ]
      in
      inline-graphics 0pt 0pt 0pt draw
  
  let footnote-register-is-first-box label =
    let hook pbinfo _ =
      let-rec is-first-search lst =
        match lst with
        | x :: xs ->
          if x == pbinfo#page-number then false else is-first-search xs
        | [] -> true
      in
      let is-first = is-first-search !ref-footnote-exists-pages in
      let () = ref-footnote-exists-pages <- pbinfo#page-number :: !ref-footnote-exists-pages in
      let tf = if is-first then `T` else `F` in
      register-cross-reference label tf
    in
    hook-page-break hook
  
  let footnote-line-box ctx label font-size line-gap = 
    match get-cross-reference label with
    |Some(`T`) ->
      let text-width = get-text-width ctx in
      line-break false false (set-paragraph-margin 0pt 0pt ctx) (
        inline-graphics (text-width *' 0.3) 0pt 0pt (fun (x, y) ->
          [ stroke 0.12mm (RGB(0.0,0.0,0.0))
            (start-path (x,y) 
              |> line-to (x +' text-width *' 0.3, y)
              |> terminate-path);
          ]
        ) ++  inline-fil
      ) +++ (block-skip (line-gap *' 1.5))
    |_ -> block-skip line-gap
  
  let footnote-scheme config counter ctx txt =
    let () = counter <- !counter + 1 in
    let () = ref-footnote-label-numer <- !ref-footnote-label-numer + 1 in
    let inner-label = ((arabic !ref-footnote-label-numer) ^ `:footnote-label`) in
    let font-size = JLReqFont.font-size in
    let line-gap = JLReqFont.line-gap in
    let reference-mark-box = 
      footnote-get-reference-mark-box ctx
        config#reference-mark-type
        config#reference-mark-font
        config#reference-mark-format
        !counter
    in
    let footnote-line-gap =
      match config#line-gap with
      |ZW(n) -> line-gap *' n
      |Length(l) -> l
    in
    let footnote-font-size = get-font-size (JLReqFont.select-font config#font ctx) in
    let footnote-box-line = footnote-line-box ctx inner-label footnote-font-size footnote-line-gap in
    let to-length ncl =
      match ncl with
      | ZW(n) -> font-size *' n
      | Length(l) -> l
    in
    let footnote-box-main = 
      let indent-c = (to-length config#indent) in
      let text-width = (get-text-width ctx) in
      let number-of-chars = round ((text-width -' indent-c) /' font-size) in
      let indent = text-width -' font-size *' (float number-of-chars) in
      let second-indent = (to-length config#second-indent) in
      let pads = (indent +' second-indent, 0pt, 0pt, 0pt) in
      let decos =
        let deco _ _ _ _ = [] in
        (deco, deco, deco, deco)
      in
      let output c =
        let cc = c
          |> JLReqFont.select-font config#font
          |> set-leading (footnote-line-gap +' footnote-font-size)
        in
        let rmb = read-inline cc (config#reference-mark-format !counter) in
        let (len,_,_) = get-natural-metrics rmb in
        let body = read-inline cc txt in
        line-break false false cc
        (
          (inline-skip (0pt -' second-indent)) ++
          rmb ++ (inline-skip (footnote-font-size)) ++ body ++ inline-fil
        )
      in
      block-frame-breakable (set-paragraph-margin 0pt 0pt ctx) pads decos output
    in
    (footnote-register-is-first-box inner-label) ++
    reference-mark-box ++
    (add-footnote (footnote-box-line +++ footnote-box-main))

end