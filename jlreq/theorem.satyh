@import: jlreq-base
@import: jlreq-font

module JLReqTheorem : sig
  val theorem-scheme : 'a -> inline-text -> int ref -> context -> string ?-> inline-text ?-> inline-text -> block-boxes
    constraint 'a :: (|
      before-space : length;
      after-space : length;
      font : nfss;
      heading-font : nfss;
      reference-label-format : int -> string;
      after-label-space : zw-or-length;
    |)
    
end = struct
  %. 定理環境
  let theorem-scheme config theorem-name counter ctx ?:label ?:heading inner =
    let font-size = JLReqFont.font-size in
    let line-gap = JLReqFont.line-gap in
    let to-length l = 
      match l with
      |ZW(n) -> font-size *' n
      |Length(len) -> len
    in
    let () = counter <- !counter + 1 in
    let subtitle = match heading with
      | None -> {}
      | Some(s) -> {(#s;)}
    in
    let hookbox = 
      match label with
      | None -> inline-nil
      | Some(l) -> 
        let () = register-cross-reference (l ^ `:num`) (config#reference-label-format !counter) in
        let hookfunc pbinfo pt =
          register-cross-reference (l ^ `:page`)  (arabic pbinfo#page-number)
        in
        hook-page-break hookfunc
    in
    let heading-ctx = JLReqFont.select-font config#heading-font ctx in
    let subtitle-box = 
      hookbox ++ 
      (read-inline heading-ctx theorem-name) ++
      (read-inline heading-ctx (embed-string (arabic !counter))) ++
      (read-inline heading-ctx subtitle) ++
      inline-skip (to-length config#after-label-space)
    in
    let inner-box = read-inline (JLReqFont.select-font config#font ctx) inner in
    let theorem-body = 
      line-break true true ctx (subtitle-box ++ inner-box ++ inline-fil)
    in
    block-skip config#before-space +++ theorem-body +++ block-skip config#after-space
end
