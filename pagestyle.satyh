@require: list
@require: fss/fss
@require: fss/style
@import: base
@import: mark

type page-style = (|
  odd-header : (context -> page-info -> string -> block-boxes);
  even-header : (context -> page-info -> string -> block-boxes);
  odd-footer : (context -> page-info -> string -> block-boxes);
  even-footer : (context -> page-info -> string -> block-boxes);
|)
  
type page-style-running-head = 
  PageStyleFirstMark of int |
  PageStyleBotMark of int |
  PageStyleTopMark of int |
  PageStyleFormat of (page-info -> string -> inline-text)

type page-style-position = 
  PageStyleBottomCenter |
  PageStyleBottomLeft |
  PageStyleBottomRight |
  PageStyleTopCenter |
  PageStyleTopLeft |
  PageStyleTopRight

module JLReqPageStyle : sig
  val register-page-style-inline : page-style -> inline-boxes
  val register-page-style : page-style -> unit
  val odd-header : (context -> page-info -> string -> block-boxes)
  val even-header : (context -> page-info -> string -> block-boxes)
  val odd-footer : (context -> page-info -> string -> block-boxes)
  val even-footer : (context -> page-info -> string -> block-boxes)

  val page-style-scheme : (|
    nombre : ((|
      position : page-style-position;
      nombre : (page-info -> string -> inline-text);
      font : style list;
    |)) list;
    running-head : ((|
      position : page-style-position;
      font : style list;
      odd : page-style-running-head;
      even : page-style-running-head;
    |)) list;
  |) -> page-style
end = struct

  let is-same-position pos1 pos2 =
    match pos1 with
    | PageStyleBottomLeft -> (
      match pos2 with
      |PageStyleBottomLeft -> true
      |_ -> false
    )
    | PageStyleBottomRight -> (
      match pos2 with
      |PageStyleBottomRight -> true
      |_ -> false
    )
    | PageStyleBottomCenter -> (
      match pos2 with
      |PageStyleBottomCenter -> true
      |_ -> false
    )
    | PageStyleTopLeft -> (
      match pos2 with
      |PageStyleTopLeft -> true
      |_ -> false
    )
    | PageStyleTopRight -> (
      match pos2 with
      |PageStyleTopRight -> true
      |_ -> false
    )
    | PageStyleTopCenter -> (
      match pos2 with
      |PageStyleTopCenter -> true
      |_ -> false
    )
  
  
  let get-text-list lst ctx pbinfo pagestr =
    let font-size = get-font-size ctx in
    let-rec out needs-skip lst ctx pbinfo pagestr =
      match lst with
      | x :: xs -> (
        let (font,format) = x in
        let it = (format pbinfo pagestr) in
        let ib = read-inline ctx {\font-style (font) {#it;}} in
        let (len,_,_) = get-natural-metrics ib in
        if len >' 0pt then
          if needs-skip then
            (inline-skip font-size) :: ib :: (out true xs ctx pbinfo pagestr)
          else
            ib :: (out true xs ctx pbinfo pagestr)
        else
          if needs-skip then
            (inline-skip font-size) :: (out false xs ctx pbinfo pagestr)
          else
            out false xs ctx pbinfo pagestr
      )
      | [] -> []
    in
    out false lst ctx pbinfo pagestr
    
  let output-left lst ctx pbinfo pagestr = List.fold-left (++) inline-nil (get-text-list lst ctx pbinfo pagestr)
  let output-right lst ctx pbinfo pagestr = 
    let lstb = get-text-list (List.reverse lst) ctx pbinfo pagestr in
    List.fold-left (++) inline-nil (List.reverse lstb)
  
  let concat-nombre-runhead ctx left right =
    let font-size = get-font-size ctx in
    let (left-len,_,_) = get-natural-metrics left in
    let (right-len,_,_) = get-natural-metrics right in
    if left-len >' 0pt && right-len >' 0pt then
      left ++ (inline-skip font-size) ++ right
    else
      left ++ right
  
  let make-headfoot left center right =
    let (leftlen,_,_) = get-natural-metrics left in
    let (rightlen,_,_) = get-natural-metrics right in
    left ++ (inline-skip (0pt -' leftlen)) ++ inline-fil ++ center ++ inline-fil ++ (inline-skip (0pt -' rightlen)) ++ right
  
  let page-style-scheme config =
    let-rec get-each-sub pos lst func =
      match lst with
      | x :: xs -> 
        if (is-same-position x#position pos) then (func x) :: (get-each-sub pos xs func)
        else (get-each-sub pos xs func)
      | [] -> []
    in
    let get-nombre x = (x#font,x#nombre) in
    let get-running-head format =
      match format with
      | PageStyleFirstMark(n) -> (fun pbinfo pagestr -> (
        match JLReqMark.get-first-mark n pbinfo#page-number with
        |None -> {}
        |Some(m) -> m
      ))
      | PageStyleBotMark(n) ->  (fun pbinfo pagestr -> (
        match JLReqMark.get-last-mark n pbinfo#page-number with
        |None -> {}
        |Some(m) -> m
      ))
      | PageStyleTopMark(n) ->  (fun pbinfo pagestr -> (
        match JLReqMark.get-last-mark n (pbinfo#page-number - 1) with
        |None -> {}
        |Some(m) -> m
      ))
      | PageStyleFormat(f) -> f
    in
    let get-odd-running-head x = (x#font,(get-running-head x#odd)) in
    let get-even-running-head x = (x#font,(get-running-head x#even)) in
    let get-each pos runhead reverse = 
      let n = get-each-sub pos config#nombre get-nombre in
      let r = get-each-sub pos config#running-head runhead in
      if reverse then (|nombre = (List.reverse n); runhead = (List.reverse r);|)
      else (|nombre = n;runhead = r;|)
    in
    
    % ノンブルも柱も左ページ（＝偶数ページ）では左からi,ii,iii
    % (nombre list, running-head list)
    let odd-bottom-left = get-each PageStyleBottomLeft get-odd-running-head true in
    let odd-bottom-right = get-each PageStyleBottomRight get-odd-running-head true in
    let odd-bottom-center = get-each PageStyleBottomCenter get-odd-running-head true in
    let odd-top-left = get-each PageStyleTopLeft get-odd-running-head true in
    let odd-top-right = get-each PageStyleTopRight get-odd-running-head true in
    let odd-top-center = get-each PageStyleTopCenter get-odd-running-head true in

    % 偶数ページは左右逆転
    let even-bottom-left = get-each PageStyleBottomRight get-even-running-head false in
    let even-bottom-right = get-each PageStyleBottomLeft get-even-running-head false in
    let even-bottom-center = get-each PageStyleBottomCenter get-even-running-head false in
    let even-top-left = get-each PageStyleTopRight get-even-running-head false in
    let even-top-right = get-each PageStyleTopLeft get-even-running-head false in
    let even-top-center = get-each PageStyleTopCenter get-even-running-head false in
    
    let odd-header ctx pbinfo pagestr =
      line-break false false ctx (
        make-headfoot (
          concat-nombre-runhead ctx
            (output-left odd-top-left#runhead ctx pbinfo pagestr)
            (output-left odd-top-left#nombre ctx pbinfo pagestr)
        ) (
          concat-nombre-runhead ctx
            (output-left odd-top-center#runhead ctx pbinfo pagestr)
            (output-left odd-top-center#nombre ctx pbinfo pagestr)
        ) (
          concat-nombre-runhead ctx
            (output-right odd-top-right#runhead ctx pbinfo pagestr)
            (output-right odd-top-right#nombre ctx pbinfo pagestr)
        )
      )
    in
    let odd-footer ctx pbinfo pagestr =
      line-break false false ctx (
        make-headfoot (
          concat-nombre-runhead ctx
            (output-left odd-bottom-left#runhead ctx pbinfo pagestr)
            (output-left odd-bottom-left#nombre ctx pbinfo pagestr)
        ) (
          concat-nombre-runhead ctx
            (output-left odd-bottom-center#runhead ctx pbinfo pagestr)
            (output-left odd-bottom-center#nombre ctx pbinfo pagestr)
        ) (
          concat-nombre-runhead ctx
            (output-right odd-bottom-right#runhead ctx pbinfo pagestr)
            (output-right odd-bottom-right#nombre ctx pbinfo pagestr)
        )
      )
    in
    let even-header ctx pbinfo pagestr =
      line-break false false ctx (
        make-headfoot (
          concat-nombre-runhead ctx
            (output-left even-top-left#nombre ctx pbinfo pagestr)
            (output-left even-top-left#runhead ctx pbinfo pagestr)
        ) (
          concat-nombre-runhead ctx
            (output-left even-top-center#nombre ctx pbinfo pagestr)
            (output-left even-top-center#runhead ctx pbinfo pagestr)
        ) (
          concat-nombre-runhead ctx
            (output-right even-top-right#nombre ctx pbinfo pagestr)
            (output-right even-top-right#runhead ctx pbinfo pagestr)
        )
      )
    in
    let even-footer ctx pbinfo pagestr =
      line-break false false ctx (
        make-headfoot (
          concat-nombre-runhead ctx
            (output-left even-bottom-left#nombre ctx pbinfo pagestr)
            (output-left even-bottom-left#runhead ctx pbinfo pagestr)
        ) (
          concat-nombre-runhead ctx
            (output-left even-bottom-center#nombre ctx pbinfo pagestr)
            (output-left even-bottom-center#runhead ctx pbinfo pagestr)
        ) (
          concat-nombre-runhead ctx
            (output-right even-bottom-right#nombre ctx pbinfo pagestr)
            (output-right even-bottom-right#runhead ctx pbinfo pagestr)
        )
      )
    in
    (|
      odd-header = odd-header;
      even-header = even-header;
      odd-footer = odd-footer;
      even-footer = even-footer;
    |)

  let-mutable ref-page-style <- page-style-scheme (|
    nombre = [(|
      position = PageStyleBottomCenter;
      nombre = (fun _ pagestr -> embed-string (pagestr));
      font = [with-font-size (fun l -> l *' 0.8)];
    |);];
    running-head = [];
  |)
  let register-page-style ps = ref-page-style <- ps
  let register-page-style-inline ps = hook-page-break (fun _ _ -> register-page-style ps)

  let odd-header ctx pbinfo =
    let ps = !ref-page-style in
    ps#odd-header ctx pbinfo 

  let even-header ctx pbinfo  =
    let ps = !ref-page-style in
    ps#even-header ctx pbinfo 

  let odd-footer ctx pbinfo  = 
    let ps = !ref-page-style in
    ps#odd-footer ctx pbinfo 
  
  let even-footer ctx pbinfo  = 
    let ps = !ref-page-style in
    ps#even-footer ctx pbinfo 
  

end
