@stage: 0
@require: base/parser

let jlreq-length (pos,str) =
  open Parser in
  open StringParser in
  let string-with-spaces s = try (spaces >> (string s) << spaces) in
  let digit-parser =
    let aux s i = (string s) >>= (fun _ -> pure i) in
    aux `0` 0.0 <|> aux `1` 1.0 <|> aux `2` 2.0 <|>
    aux `3` 3.0 <|> aux `4` 4.0 <|> aux `5` 5.0 <|>
    aux `6` 6.0 <|> aux `7` 7.0 <|> aux `8` 8.0 <|>
    aux `9` 9.0
  in
  
  let digits-parser-u =
    (some digit-parser) >>= (fun s -> pure (List.fold-left (fun a b -> 10.0 *. a +. b) 0.0 s))
  in
  
  let digits-parser-l =
    (some digit-parser) >>= (fun s -> pure (0.1 *. (List.fold-right (fun a b -> a +. (0.1 *. b)) 0.0 s)))
  in
  
  let float-parser =
    choice [
      try (sequence [(digits-parser-u << string `.`); digits-parser-l] >>= (fun s -> pure (List.fold-left (+.) 0.0 s)));
      try digits-parser-u;
    ]
  in

  let float-eq-parser = fix (fun float-eq-parser -> (
    let float-factor-parser = choice [
      try float-parser;
      try (between (string-with-spaces `(`) (string-with-spaces `)`) float-eq-parser);
    ]
    in

    let float-term-parser = sequence [
      float-factor-parser;
      many (choice [
        try ((string-with-spaces `*`) >> float-factor-parser);
        try ((string-with-spaces `/`) >> float-factor-parser >>= (fun l -> pure (1.0 /. l)));
      ]) >>= (fun s -> pure (List.fold-left (*.) 1.0 s));
    ] >>= (fun s -> pure (List.fold-left (*.) 1.0 s))
    in
    
    (sequence [
      choice [
        try ((string-with-spaces `-`) >> float-term-parser >>= (fun s -> pure (0.0 -. s)));
        try float-term-parser;
      ];
      (many (choice [
        try ((string-with-spaces `-`) >> float-term-parser >>= (fun s -> pure (0.0 -. s)));
        try ((string-with-spaces `+`) >> float-term-parser);
      ])) >>= (fun s -> pure (List.fold-left (+.) 0.0 s));
    ] >>= (fun s -> pure (List.fold-left (+.) 0.0 s)))
  ))
  in
  
  let length-parser = choice [
    try ((float-parser << (string `pt`)) >>= (fun l -> pure (fun _ -> &(~(lift-length (1pt *'  l))))));
    try ((float-parser << (string `em`)) >>= (fun l -> pure (fun (len,_) -> &(~len *' ~(lift-float l)))));
    try ((float-parser << (string `zw`)) >>= (fun l -> pure (fun (len,lang-len) -> &(
      match ~lang-len `ja` with
      | None -> ~len *' ~(lift-float l)
      | Some(ll) -> ll *' ~(lift-float l)
    ))));
  ]
  in
  
  let length-calc a b c =
    (a >>= (fun p -> (b >>= (fun q -> pure (
      fun x -> &(~(q x) *' ~(lift-float p))
    )))))
    >>= (fun q -> (c >>= (fun r -> pure (
      fun x -> &(~(q x) *' ~(lift-float r))
    ))))
  in

  let length-eq-parser = fix (fun length-eq-parser -> (
    let length-factor = choice [
      try length-parser;
      try (between (string-with-spaces `(`) (string-with-spaces `)`) length-eq-parser);
    ] in
    let float-term-parser = choice [
      try (float-parser << (not-followed-by ((string `pt`) <|> (string `zw`) <|> (string `em`))));
      try (between (string-with-spaces `(`) (string-with-spaces `)`) float-eq-parser);
    ] in
    let length-term-parser = length-calc
      ((many (float-term-parser << (string-with-spaces `*`))) >>= (fun l -> pure (List.fold-left (*.) 1.0 l)))
      length-factor
      ((many (choice [
        try (((string-with-spaces `/`) >> float-term-parser)) >>= (fun l -> pure (1.0 /. l));
        try ((string-with-spaces `*`) >> float-term-parser);
      ])) >>= (fun l -> pure (List.fold-left (*.) 1.0 l)))
    in
    sequence [
      choice [
        try ((string-with-spaces `-`) >> length-term-parser >>= (fun s -> pure (fun x -> &(0pt -' ~(s x)))));
        length-term-parser;
      ];
      (many (choice [
        try ((string-with-spaces `-`) >> length-term-parser >>= (fun s -> pure (fun x -> &(0pt -' ~(s x)))));
        (string-with-spaces `+`) >> length-term-parser;
      ])) >>= (fun s -> pure (fun x -> (List.fold-left (fun a b -> &(~a +' ~(b x))) &(0pt) s)));
    ] >>= (fun s -> pure (fun x -> (List.fold-left (fun a b -> &(~a +' ~(b x))) &(0pt) s)))
  ))
  in
  let main = spaces >> length-eq-parser << (spaces >> eof) in

  let (fname,line,_) = get-input-position pos in
  match StringParser.run main str with
  | Err(_) -> abort-with-message (#`Syntax error in length expression, at line `# ^ (arabic line) ^ #` in `# ^ fname)
  | Ok(f) -> &(fun x y -> ~(f (&x,&y)))

